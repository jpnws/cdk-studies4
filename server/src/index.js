"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const connections_1 = require("./connections");
const app = express_1.default();
const port = process.env.PORT || 80;
connections_1.init();
app.use(cors_1.default());
app.use(express_1.default.json());
app.post('/', async (req, res) => {
    try {
        const { todo_name, todo_description, todo_completed } = req.body.todo;
        const sql = `
    INSERT INTO Todolist
      (
        \`todo_name\`,
        \`todo_description\`,
        \`todo_completed\`
      )
      VALUES
        (
          "${todo_name}",
          "${todo_description}",
          ${todo_completed}
        );
  `;
        const response = await connections_1.execute(sql, {});
        const { insertId } = response;
        if (!insertId)
            return res.status(400).send('Failed to insert todo');
        const todo = {
            id: insertId,
            todo_completed,
            todo_description,
            todo_name,
        };
        return res.status(200).send({
            todo,
        });
    }
    catch (err) {
        console.log(err);
        return res.status(400).send({
            message: err.message,
        });
    }
});
app.get('/', async (_, res) => {
    try {
        const sql = `SELECT * FROM Todolist;`;
        const response = await connections_1.execute(sql, {});
        return res.status(200).send({ todos: response });
    }
    catch (err) {
        console.log(err);
        return res.status(400).send({
            message: err.message,
        });
    }
});
app.get('/health', async (_, res) => {
    return res.status(200).send({ status: 'available' });
});
const server = app.listen(port, () => {
    console.log(`Server is listening on port ${port}`);
});
server.keepAliveTimeout = 30000;
server.headersTimeout = 31000;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNEQUE4QjtBQUM5QixnREFBd0I7QUFLeEIsK0NBQThDO0FBRTlDLE1BQU0sR0FBRyxHQUFHLGlCQUFPLEVBQUUsQ0FBQztBQUN0QixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7QUFFcEMsa0JBQUksRUFBRSxDQUFDO0FBRVAsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ2hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBRXhCLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDL0IsSUFBSTtRQUNGLE1BQU0sRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsY0FBYyxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFdEUsTUFBTSxHQUFHLEdBQUc7Ozs7Ozs7OzthQVNILFNBQVM7YUFDVCxnQkFBZ0I7WUFDakIsY0FBYzs7R0FFdkIsQ0FBQztRQUVBLE1BQU0sUUFBUSxHQUFHLE1BQU0scUJBQU8sQ0FBVyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFbEQsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLFFBQVEsQ0FBQztRQUU5QixJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUVwRSxNQUFNLElBQUksR0FBUztZQUNqQixFQUFFLEVBQUUsUUFBUTtZQUNaLGNBQWM7WUFDZCxnQkFBZ0I7WUFDaEIsU0FBUztTQUNWLENBQUM7UUFFRixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQzFCLElBQUk7U0FDTCxDQUFDLENBQUM7S0FDSjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVqQixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQzFCLE9BQU8sRUFBRyxHQUFXLENBQUMsT0FBTztTQUM5QixDQUFDLENBQUM7S0FDSjtBQUNILENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUM1QixJQUFJO1FBQ0YsTUFBTSxHQUFHLEdBQUcseUJBQXlCLENBQUM7UUFFdEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxxQkFBTyxDQUFPLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUU5QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDbEQ7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMxQixPQUFPLEVBQUcsR0FBVyxDQUFDLE9BQU87U0FDOUIsQ0FBQyxDQUFDO0tBQ0o7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDbEMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZELENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFO0lBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLElBQUksRUFBRSxDQUFDLENBQUM7QUFDckQsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0FBQ2hDLE1BQU0sQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgY29ycyBmcm9tICdjb3JzJztcbmltcG9ydCB7IE9rUGFja2V0IH0gZnJvbSAnbXlzcWwnO1xuXG5pbXBvcnQgeyBUb2RvIH0gZnJvbSAnLi9AdHlwZXMnO1xuXG5pbXBvcnQgeyBleGVjdXRlLCBpbml0IH0gZnJvbSAnLi9jb25uZWN0aW9ucyc7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmNvbnN0IHBvcnQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDgwO1xuXG5pbml0KCk7XG5cbmFwcC51c2UoY29ycygpKTtcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xuXG5hcHAucG9zdCgnLycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgdG9kb19uYW1lLCB0b2RvX2Rlc2NyaXB0aW9uLCB0b2RvX2NvbXBsZXRlZCB9ID0gcmVxLmJvZHkudG9kbztcblxuICAgIGNvbnN0IHNxbCA9IGBcbiAgICBJTlNFUlQgSU5UTyBUb2RvbGlzdFxuICAgICAgKFxuICAgICAgICBcXGB0b2RvX25hbWVcXGAsXG4gICAgICAgIFxcYHRvZG9fZGVzY3JpcHRpb25cXGAsXG4gICAgICAgIFxcYHRvZG9fY29tcGxldGVkXFxgXG4gICAgICApXG4gICAgICBWQUxVRVNcbiAgICAgICAgKFxuICAgICAgICAgIFwiJHt0b2RvX25hbWV9XCIsXG4gICAgICAgICAgXCIke3RvZG9fZGVzY3JpcHRpb259XCIsXG4gICAgICAgICAgJHt0b2RvX2NvbXBsZXRlZH1cbiAgICAgICAgKTtcbiAgYDtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZXhlY3V0ZTxPa1BhY2tldD4oc3FsLCB7fSk7XG5cbiAgICBjb25zdCB7IGluc2VydElkIH0gPSByZXNwb25zZTtcblxuICAgIGlmICghaW5zZXJ0SWQpIHJldHVybiByZXMuc3RhdHVzKDQwMCkuc2VuZCgnRmFpbGVkIHRvIGluc2VydCB0b2RvJyk7XG5cbiAgICBjb25zdCB0b2RvOiBUb2RvID0ge1xuICAgICAgaWQ6IGluc2VydElkLFxuICAgICAgdG9kb19jb21wbGV0ZWQsXG4gICAgICB0b2RvX2Rlc2NyaXB0aW9uLFxuICAgICAgdG9kb19uYW1lLFxuICAgIH07XG5cbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLnNlbmQoe1xuICAgICAgdG9kbyxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coZXJyKTtcblxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuc2VuZCh7XG4gICAgICBtZXNzYWdlOiAoZXJyIGFzIGFueSkubWVzc2FnZSxcbiAgICB9KTtcbiAgfVxufSk7XG5cbmFwcC5nZXQoJy8nLCBhc3luYyAoXywgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc3FsID0gYFNFTEVDVCAqIEZST00gVG9kb2xpc3Q7YDtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZXhlY3V0ZTxUb2RvPihzcWwsIHt9KTtcblxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuc2VuZCh7IHRvZG9zOiByZXNwb25zZSB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coZXJyKTtcblxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuc2VuZCh7XG4gICAgICBtZXNzYWdlOiAoZXJyIGFzIGFueSkubWVzc2FnZSxcbiAgICB9KTtcbiAgfVxufSk7XG5cbmFwcC5nZXQoJy9oZWFsdGgnLCBhc3luYyAoXywgcmVzKSA9PiB7XG4gIHJldHVybiByZXMuc3RhdHVzKDIwMCkuc2VuZCh7IHN0YXR1czogJ2F2YWlsYWJsZScgfSk7XG59KTtcblxuY29uc3Qgc2VydmVyID0gYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKGBTZXJ2ZXIgaXMgbGlzdGVuaW5nIG9uIHBvcnQgJHtwb3J0fWApO1xufSk7XG5cbnNlcnZlci5rZWVwQWxpdmVUaW1lb3V0ID0gMzAwMDA7XG5zZXJ2ZXIuaGVhZGVyc1RpbWVvdXQgPSAzMTAwMDtcbiJdfQ==